{"version":3,"file":"static/js/84.ff5bc4ed.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://phonebook-frontend/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://phonebook-frontend/./src/components/EditContactForm/editContactForm.module.css?7ef8","components/EditContactForm/EditContactForm.jsx","redux/filter/filter-selectors.js","webpack://phonebook-frontend/./src/components/Contacts/contacts.module.css?1e09","components/Contacts/Contacts.jsx","webpack://phonebook-frontend/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://phonebook-frontend/./src/pages/ContactsPage/contactsPage.module.css?6e18","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsEditing = state => state.contacts.isEditing;\nexport const selectSetSelectedId = state => state.contacts.selectedId;\nexport const selectError = state => state.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contactForm_container__dyO4h\",\"form\":\"contactForm_form__3ay0L\",\"inputGroup\":\"contactForm_inputGroup__ExlEu\",\"label\":\"contactForm_label__WakW9\",\"input\":\"contactForm_input__wCtae\",\"addBtn\":\"contactForm_addBtn__w43Vw\",\"changeBgColor\":\"contactForm_changeBgColor__05-0a\"};","import { useState, useRef, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchAddContact } from \"../../redux/contacts/contacts-operations\";\nimport styles from \"./contactForm.module.css\";\n\nimport Button from \"../Button/Button\";\n\nconst INITIAL_VALUE = {\n  name: \"\",\n  phone: \"\",\n};\n\nconst Form = () => {\n  const [value, setValue] = useState({ ...INITIAL_VALUE });\n\n  const focusRef = useRef(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    focusRef.current.focus();\n  }, []);\n\n  const onAddContact = (data) => {\n    dispatch(fetchAddContact(data));\n  };\n\n  const handleInput = ({ currentTarget: { name, value } }) => {\n    setValue((prevValue) => ({\n      ...prevValue,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    focusRef.current.focus();\n\n    onAddContact(value);\n\n    reset();\n  };\n\n  const reset = () => {\n    setValue({ ...INITIAL_VALUE });\n  };\n\n  const { name, email = \"\", phone } = value;\n\n  return (\n    <div className={styles.container}>\n      <form onSubmit={handleSubmit} className={styles.form}>\n        <div className={styles.inputGroup}>\n          <label className={styles.label}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              placeholder=\"Please enter the name\"\n              // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              className={styles.input}\n              ref={focusRef}\n              required\n            />\n          </label>\n          <label className={styles.label}>\n            Phone\n            <input\n              type=\"tel\"\n              name=\"phone\"\n              value={phone}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              placeholder=\"Please enter the phone\"\n              // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              className={styles.input}\n              required\n            />\n          </label>\n          <label className={styles.label}>\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              placeholder=\"Please enter the email\"\n              // pattern=\"/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\"\n              title=\"Email may contain letters, digits, dash and can`t contain spaces, and must contain @\"\n              className={styles.input}\n            />\n          </label>\n          <Button className={styles.addBtn}>Add Contact</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"editContactForm_container__bHmMU\",\"form\":\"editContactForm_form__ODVeW\",\"inputGroup\":\"editContactForm_inputGroup__8OO64\",\"label\":\"editContactForm_label__XBLNo\",\"input\":\"editContactForm_input__x9hwx\",\"addBtn\":\"editContactForm_addBtn__-aRMC\",\"changeBgColor\":\"editContactForm_changeBgColor__jd3qV\"};","import { useState, useRef, useEffect } from \"react\";\nimport {\n  selectContacts,\n  selectSetSelectedId,\n} from \"../../redux/contacts/contacts-selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchEditContact,\n  fetchContacts,\n} from \"../../redux/contacts/contacts-operations\";\nimport styles from \"./editContactForm.module.css\";\n\nimport Button from \"../Button/Button\";\n\nconst EditForm = () => {\n  const contacts = useSelector(selectContacts);\n  const contactId = useSelector(selectSetSelectedId);\n\n  const contact = contacts.find((item) => item._id === contactId);\n\n  const [value, setValue] = useState(contact);\n\n  const focusRef = useRef(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    focusRef.current.focus();\n  }, []);\n\n  const onUpdateContact = () => {\n    dispatch(fetchEditContact(value))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchContacts());\n      });\n  };\n\n  const handleInput = ({ currentTarget: { name, value } }) => {\n    setValue((prevValue) => ({\n      ...prevValue,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    focusRef.current.focus();\n\n    onUpdateContact(value);\n  };\n\n  const { name, email = \"\", phone } = value;\n\n  return (\n    <div className={styles.container}>\n      <form onSubmit={handleSubmit} className={styles.form}>\n        <div className={styles.inputGroup}>\n          <label className={styles.label}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              className={styles.input}\n              ref={focusRef}\n              required\n            />\n          </label>\n          <label className={styles.label}>\n            Phone\n            <input\n              type=\"tel\"\n              name=\"phone\"\n              value={phone}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              className={styles.input}\n              required\n            />\n          </label>\n          <label className={styles.label}>\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              autoComplete=\"off\"\n              onChange={handleInput}\n              // pattern=\"/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\"\n              title=\"Email may contain letters, digits, dash and can`t contain spaces, and must contain @\"\n              className={styles.input}\n            />\n          </label>\n          <Button className={styles.addBtn}>Update Contact</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EditForm;\n","export const selectFilter = state => state.filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contacts_list__QBWBd\",\"item\":\"contacts_item__82PmL\",\"wrapper\":\"contacts_wrapper__oTW5p\",\"itemTitle\":\"contacts_itemTitle__bOWRW\",\"itemText\":\"contacts_itemText__gXmJX\",\"itemBtnWrap\":\"contacts_itemBtnWrap__1aZIO\",\"contBtn\":\"contacts_contBtn__LyZkX\",\"changeBgColor\":\"contacts_changeBgColor__TJIvz\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts } from \"../../redux/contacts/contacts-selectors\";\nimport { fetchDeleteContact } from \"../../redux/contacts/contacts-operations\";\nimport {\n  toggleIsEditing,\n  setSelectedId,\n} from \"../../redux/contacts/contacts-slice\";\nimport { selectFilter } from \"../../redux/filter/filter-selectors\";\nimport styles from \"./contacts.module.css\";\n\nimport { BiSolidEditAlt } from \"react-icons/bi\";\nimport { RiDeleteBin7Line } from \"react-icons/ri\";\n\nimport Button from \"../Button/Button\";\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const filterSearch = () => {\n    if (!filter) {\n      return contacts;\n    }\n    const newContact = contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return newContact;\n  };\n\n  const filtredContacts = filterSearch();\n\n  const onDeleteContact = (_id) => {\n    dispatch(fetchDeleteContact(_id));\n  };\n\n  const onToggleEditContact = (_id) => {\n    dispatch(toggleIsEditing());\n    dispatch(setSelectedId(_id));\n  };\n\n  return (\n    <div>\n      <ul className={styles.list}>\n        {filtredContacts.map(({ _id, name, phone, email }) => {\n          return (\n            <li className={styles.item} key={_id}>\n              <div className={styles.wrapper}>\n                <p className={styles.itemTitle}>{name}</p>\n                <p className={styles.itemText}>{phone}</p>\n                <p className={styles.itemText}>{email}</p>\n              </div>\n              <div className={styles.itemBtnWrap}>\n                <Button\n                  className={styles.contBtn}\n                  onClick={() => onToggleEditContact(_id)}\n                >\n                  <BiSolidEditAlt />\n                </Button>\n                <Button\n                  className={styles.contBtn}\n                  onClick={() => onDeleteContact(_id)}\n                >\n                  <RiDeleteBin7Line />\n                </Button>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"filter_container__8MH92\",\"inputGroup\":\"filter_inputGroup__osn-F\",\"input\":\"filter_input__sX944\",\"title\":\"filter_title__k4Z+2\",\"item\":\"filter_item__3oaqa\",\"btn\":\"filter_btn__vMALR\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { selectFilter } from \"../../redux/filter/filter-selectors\";\nimport { addFilter } from \"../../redux/filter/filter-slice\";\nimport styles from \"./filter.module.css\";\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onFilter = (e) => {\n    const { value } = e.target;\n    dispatch(addFilter(value));\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputGroup}>\n        <input\n          type=\"text\"\n          placeholder=\"Find contact by name\"\n          value={filter}\n          name=\"filter\"\n          autoComplete=\"off\"\n          className={styles.input}\n          onChange={onFilter}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"contactsPage_section__6BZAZ\",\"container\":\"contactsPage_container__qArTW\",\"sectionTitle\":\"contactsPage_sectionTitle__-HxyL\",\"wrapper\":\"contactsPage_wrapper__37PRz\",\"contactsListWrapper\":\"contactsPage_contactsListWrapper__LipHt\",\"error\":\"contactsPage_error__ftldK\"};","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  selectContacts,\n  selectIsEditing,\n  selectError,\n} from \"../../redux/contacts/contacts-selectors\";\nimport { fetchContacts } from \"../../redux/contacts/contacts-operations\";\n\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport EditForm from \"../../components/EditContactForm/EditContactForm\";\nimport Contacts from \"../../components/Contacts/Contacts\";\nimport Filter from \"../../components/Filter/Filter\";\n\nimport styles from \"./contactsPage.module.css\";\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const edit = useSelector(selectIsEditing);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const total = contacts.length;\n\n  return (\n    <>\n      {error ? (\n        <p className={styles.error}>Something went wrong. Try again later.</p>\n      ) : (\n        <div className={styles.section}>\n          <div className={styles.container}>\n            <h1 className={styles.sectionTitle}>PhoneBook</h1>\n            <div className={styles.wrapper}>\n              {edit ? <EditForm /> : <ContactForm />}\n              <div className={styles.contactsListWrapper}>\n                <h2>Contacts ({total})</h2>\n                <Filter />\n                {contacts.length !== 0 && <Contacts />}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","selectIsEditing","isEditing","selectSetSelectedId","selectedId","selectError","error","INITIAL_VALUE","name","phone","_useState","useState","_objectSpread","_useState2","_slicedToArray","value","setValue","focusRef","useRef","dispatch","useDispatch","useEffect","current","focus","handleInput","_ref","_ref$currentTarget","currentTarget","prevValue","_defineProperty","reset","_value$email","email","_jsx","className","styles","children","onSubmit","event","data","preventDefault","fetchAddContact","_jsxs","type","autoComplete","onChange","placeholder","title","ref","required","Button","useSelector","contactId","contact","find","item","_id","fetchEditContact","unwrap","then","fetchContacts","selectFilter","filter","filtredContacts","toLowerCase","includes","map","onClick","toggleIsEditing","setSelectedId","onToggleEditContact","BiSolidEditAlt","fetchDeleteContact","onDeleteContact","RiDeleteBin7Line","e","target","addFilter","edit","total","length","_Fragment","EditForm","ContactForm","Filter","Contacts"],"sourceRoot":""}